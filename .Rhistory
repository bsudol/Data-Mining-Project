responses <- read.table("responses.csv", header = TRUE, sep =",")
responses$Music <- NULL;responses$Dance <- NULL;responses$Dance<- NULL;responses$Folk<- NULL;responses$Country<-NULL;responses$Classical.music<-NULL;responses$Musical<-NULL;responses$Pop<-NULL;responses$Rock<-NULL;responses$Metal.or.Hardrock<-NULL;responses$Punk<-NULL;responses$Hiphop..Rap<-NULL;responses$Reggae..Ska<-NULL;responses$Swing..Jazz<-NULL;responses$Rock.n.roll<-NULL;responses$Alternative<-NULL;responses$Latino<-NULL;responses$Techno..Trance<-NULL;responses$Opera<-NULL;responses$Movies<-NULL;responses$Horror<-NULL;responses$Thriller<-NULL;responses$Comedy<-NULL;responses$Romantic<-NULL;responses$Sci.fi<-NULL;responses$War<-NULL;responses$Fantasy.Fairy.tales<-NULL;responses$Animated<-NULL;responses$Animated<-NULL;responses$Documentary<-NULL;responses$Western<-NULL;responses$Action<-NULL;responses$History<-NULL;responses$Psychology<-NULL;responses$Politics<-NULL;responses$Mathematics<-NULL;responses$Physics<-NULL;responses$Internet<-NULL;responses$PC<-NULL;responses$Economy.Management<-NULL;responses$Biology<-NULL;responses$Chemistry<-NULL;responses$Reading<-NULL;responses$Geography<-NULL;responses$Foreign.languages<-NULL;responses$Medicine<-NULL;responses$Law<-NULL;responses$Cars<-NULL;responses$Art.exhibitions<-NULL;responses$Religion<-NULL;responses$Countryside..outdoors<-NULL;responses$Dancing<-NULL;responses$Musical.instruments<-NULL;responses$Writing<-NULL
#clean out lines involving music movies and interests for this portion of the study to save data when we omit lines with missing responses. did it manually because it was messing up the CSV when I tried to do it in excel
dim(responses)
#create new applicable variables
responses$Sport = (responses$Active.sport+responses$Passive.sport)/2 #new variable for average 'sportiness'
responses$BMI = responses$Weight/(responses$Height/100)^2
#finish setting up data make training and test sets
responses <- na.omit(responses)
dim(responses)
View(responses)
set.seed(1)
train_idx = sample(1:nrow(responses), 3/4*nrow(responses))
train_idx = responses[train_idx,]
test_idx = responses[-train_idx,]
responses
## example###
library(gbm)
set.seed(2)
responses.train=sample(1:nrow(responses), nrow(responses)/2)
responses.test=responses[-train,]
boost.responses= gbm(Happiness.in.life~Happiness.in.life ~ Health + Healthy.eating + Sport + Interneta + Spending.on.healthy.eating + Smoking + Age, data = responses[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
#default shrinkage = 0.001
train=sample(1:nrow(responses), nrow(responses)/2)
responses.test=responses[-train,]
boost.responses= gbm(Happiness.in.life~Happiness.in.life ~ Health + Healthy.eating + Sport + Interneta + Spending.on.healthy.eating + Smoking + Age, data = responses[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
#default shrinkage = 0.001
boost.responses= gbm(Happiness.in.life~Happiness.in.life ~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
#default shrinkage = 0.001
boost.responses= gbm(Happiness.in.life ~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
responses$Happiness.in.life
summary(responses$Happiness.in.life)
Happy=ifelse(Happiness.in.life<=3.7,"No","Yes")
responses_happynum = transform(responses, Happy=as.numeric(Happy))
Happy=ifelse(responses$Happiness.in.life<=3.7,"No","Yes")
responses_happynum = transform(responses, Happy=as.numeric(Happy))
Happy
Happy<-as.numeric(Happy)
Happy<-as.numeric(as.factor(Happy))
Happy
Happy<-as.numeric(Happy)-1
Happy
Happy <- revalue(Happy, c("Yes"=1))
Happy <- revalue(Happy, c("No"=0))
library(plyr)
install.packages(plyr)
Happy=ifelse(responses$Happiness.in.life<=3.7,0,1)
Happy
responses_happynum=data.frame(responses,High)
responses_happynum=data.frame(responses,Happy)
responses_happynum
#boosting#
## example###
library(gbm)
set.seed(2)
train=sample(1:nrow(responses), nrow(responses)/2)
Happy=ifelse(responses$Happiness.in.life<=3.7,0,1)
responses_happynum=data.frame(responses,Happy)
responses.test=responses_happynum[-train,]
boost.responses= gbm(Happiness.in.life ~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses_happynum[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
boost.responses= gbm(responses$Happiness.in.life ~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses_happynum[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
responses_happynum
responses_happy=data.frame(responses,Happy)
boost.responses= gbm(responses_Happy$Happy~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses_happynum[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
boost.responses= gbm(responses_happy$Happy~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses_happynum[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
boost.responses= gbm(responses_happy$Happy~Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses_happynum[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
boost.responses= gbm(Happy~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age, data = responses_happy[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
plot(boost.responses)
summary(boost.responses)
boost.responses= gbm(Happy~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age + God + Number.of.friends + Friends.versus.money + Alcohol + Education, data = responses_happy[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
summary(boost.responses)
boost.responses= gbm(Happy~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age + God + Number.of.friends + Friends.versus.money + Alcohol + Education + Pets, data = responses_happy[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
#default shrinkage = 0.001
summary(boost.responses)
responses.test=responses_happy[-train,]
yhat.boost = predict(boost.responses, responses.test, n.trees=1000)
Happy_test=Happy[-train]
yhat.boost<-ifelse(yhat.boost>0, 1,0)
table(yhat.boost, Happy_test)
classification_error=(c(1,2)+c(2,1))/393
classification_error
boost.responses= gbm(Happy~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Smoking + Age + God + Number.of.friends + Friends.versus.money + Alcohol + Education + Pets + Fun.with.friends, data = responses_happy[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
#default shrinkage = 0.001
summary(boost.responses)
boost.responses= gbm(Happy~ Health + Healthy.eating + Sport + Internet.usage + Spending.on.healthy.eating + Spending.on.looks + Smoking + Age + God + Number.of.friends + Friends.versus.money + Alcohol + Education + Pets + Fun.with.friends, data = responses_happy[train,], distribution = "bernoulli", n.trees = 1000, interaction.depth = 4)
#default shrinkage = 0.001
summary(boost.responses)
yhat.boost = predict(boost.responses, responses.test, n.trees=1000)
Happy_test=Happy[-train]
yhat.boost<-ifelse(yhat.boost>0, 1,0)
table(yhat.boost, Happy_test)
classification_error=(c(1,2)+c(2,1))/393
classification_error
